name: ci-flow

on:
  pull_request:
  push:
    branches:
      - master
      - "releases/*"
    # tags-ignore:
    #   - "[0-9]+.[0-9]+.[0-9]+*"

jobs:
  # build_windows:
  #   runs-on: windows-2019
  #   steps:
  #     - uses: actions/checkout@master
  #     - name: Install llvm on Windows
  #       shell: powershell
  #       run: |
  #         Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')

  #         scoop install llvm --global
  #         $Env:Path
  #         Get-ChildItem -Path C:\ProgramData\scoop\shims -Filter *llvm* -Recurse -ErrorAction SilentlyContinue -Force
  #     - uses: actions-rs/cargo@v1
  #       env:
  #         LIBCLANG_PATH: C:\ProgramData\scoop\apps\llvm\current\bin
  #       with:
  #         command: build
  #         args: --release --all-features
  build:
    runs-on: ${{ matrix.os.imageName }}
    strategy:
      matrix:
        rust_toolchain: ["stable"]
        os:
          - imageName: ubuntu-18.04
            target: x86_64-unknown-linux-gnu
            profile: linux
          - imageName: "macOS-latest"
            target: x86_64-apple-darwin
            profile: mac
          - imageName: "windows-2019"
            target: x86_64-pc-windows-msvc
            profile: windows
    steps:
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust_toolchain }}
          override: true
      - name: Install llvm on Windows
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
          scoop install llvm --global
          echo "::set-env name=LIBCLANG_PATH::C:\ProgramData\scoop\apps\llvm\current\bin"
      - uses: davidB/rust-cargo-make@v1
      - uses: actions/checkout@v1
      - name: Run tests
        run: cargo make --profile ci-static-code-analysis-tasks --env TARGET=${{matrix.os.target}} ci-flow
      - name: build release
        run: cargo make build-release
      - name: Upload release library (macOS)
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v1
        with:
          name: libs
          path: target/release/libmenu.dylib
      - name: Upload release library (Linux)
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v1
        with:
          name: libs
          path: target/release/libmenu.so
  export_game:
    needs: build
    runs-on: ubuntu-latest
    name: Export Game Job
    steps:
      - name: checkout
        uses: actions/checkout@v2.0.0
      - name: Download libraries
        uses: actions/download-artifact@v1
        with:
          name: libs
      - shell: bash
        run: |
          mkdir -p target/release
          mv libs/libmenu.dylib target/release/
      - name: export game
        uses: firebelley/godot-export@v1.0.1
        with:
          godot_executable_download_url: https://downloads.tuxfamily.org/godotengine/3.1.2/Godot_v3.1.2-stable_linux_headless.64.zip
          godot_export_templates_download_url: https://downloads.tuxfamily.org/godotengine/3.1.2/Godot_v3.1.2-stable_export_templates.tpz
          godot_template_version: 3.1.2.stable
          relative_project_path: ./
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
