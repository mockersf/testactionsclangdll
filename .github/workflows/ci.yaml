name: ci-flow

on:
  pull_request:
  push:
    branches:
      - master
      - "releases/*"

jobs:
  tests:
    runs-on: ${{ matrix.os.imageName }}
    strategy:
      matrix:
        rust_toolchain: ["stable"]
        os:
          - imageName: ubuntu-18.04
            target: x86_64-unknown-linux-gnu
            profile: linux
            # - imageName: "macOS-latest"
            #   target: x86_64-apple-darwin
            #   profile: mac
            # - imageName: "windows-2019"
            #   target: x86_64-pc-windows-msvc
            #   profile: windows
    steps:
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust_toolchain }}
          override: true
      - name: Install llvm on Windows
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
          scoop install llvm --global
          echo "::set-env name=LIBCLANG_PATH::C:\ProgramData\scoop\apps\llvm\current\bin"
      - uses: davidB/rust-cargo-make@v1
      - uses: actions/checkout@v1
      - name: Run tests
        run: cargo make --profile ci-static-code-analysis-tasks --env TARGET=${{matrix.os.target}} ci-flow

  nightly-build:
    runs-on: ${{ matrix.os.imageName }}
    strategy:
      matrix:
        rust_toolchain: ["stable"]
        os:
          - imageName: "macOS-latest"
            target: x86_64-apple-darwin
            profile: mac
    steps:
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust_toolchain }}
          override: true
      - uses: davidB/rust-cargo-make@v1
      - uses: actions/checkout@v1
      - name: Build release
        run: cargo make build-release
      - name: Upload release library (macOS)
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v1
        with:
          name: libs
          path: target/release/libmenu.dylib
  # nightly-export:
  #   needs: ["nightly-build", "tests"]
  #   runs-on: ubuntu-latest
  #   name: Export Game Job
  #   steps:
  #     - name: checkout
  #       uses: actions/checkout@v2.0.0
  #     - name: Download libraries
  #       uses: actions/download-artifact@v1
  #       with:
  #         name: libs
  #     - shell: bash
  #       run: |
  #         mkdir -p target/release
  #         mv libs/libmenu.* target/release/
  #     - name: export game
  #       uses: firebelley/godot-export@v1.0.1
  #       with:
  #         godot_executable_download_url: https://downloads.tuxfamily.org/godotengine/3.2/rc2/Godot_v3.2-rc2_linux_headless.64.zip
  #         godot_export_templates_download_url: https://downloads.tuxfamily.org/godotengine/3.2/rc2/Godot_v3.2-rc2_export_templates.tpz
  #         godot_template_version: 3.2.rc2
  #         relative_project_path: ./
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  nightly-export:
    needs: ["nightly-build", "tests"]
    runs-on: ubuntu-latest
    name: Export Nightly Release
    steps:
      - name: checkout
        uses: actions/checkout@v2.0.0
      - name: Download libraries
        uses: actions/download-artifact@v1
        with:
          name: libs
      - name: Setup libraries in expected folder
        shell: bash
        run: |
          mkdir -p target/release
          mv libs/libmenu.* target/release/
      - name: Export Game
        uses: mockersf/godot-export@v1.0.2
        with:
          godot_executable_download_url: https://downloads.tuxfamily.org/godotengine/3.2/rc2/Godot_v3.2-rc2_linux_headless.64.zip
          godot_export_templates_download_url: https://downloads.tuxfamily.org/godotengine/3.2/rc2/Godot_v3.2-rc2_export_templates.tpz
          godot_template_version: 3.2.rc2
          relative_project_path: ./
          create_release: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - shell: bash
        run: |
          pwd
          echo "in current dir:"
          ls -lrtha
          echo "in builds:"
          ls -lrtha builds
      - name: Build and Deploy
        uses: JamesIves/github-pages-deploy-action@releases/v3
        with:
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          BRANCH: gh-pages # The branch the action should deploy to.
          FOLDER: builds # The folder the action should deploy.

  # export-2:
  #   needs: ["nightly-build", "tests"]
  #   runs-on: ubuntu-latest
  #   name: Export Game Job
  #   steps:
  #     - name: checkout
  #       uses: actions/checkout@v2.0.0
  #     - name: Download libraries
  #       uses: actions/download-artifact@v1
  #       with:
  #         name: libs
  #     - shell: bash
  #       run: |
  #         mkdir -p target/release
  #         mv libs/libmenu.* target/release/
  #         ls -lrtha target/release
  #     - name: Build
  #       id: build
  #       uses: josephbmanley/build-godot-action@v1.3.1
  #       with:
  #         name: komarawii
  #         preset: "MacOSX"
  #     - shell: bash
  #       run: |
  #         ls -lrtha build
  #     - name: Build and Deploy
  #       uses: JamesIves/github-pages-deploy-action@releases/v3
  #       with:
  #         ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
  #         BRANCH: gh-pages # The branch the action should deploy to.
  #         FOLDER: build # The folder the action should deploy.
